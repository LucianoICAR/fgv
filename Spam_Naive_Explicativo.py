
import streamlit as st
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline

st.title("üîç Classificador de E-mails Spam com Naive Bayes")

st.markdown("""
Este app utiliza **Aprendizado Supervisionado** com o algoritmo **Naive Bayes Multinomial**, amplamente usado em classifica√ß√£o de textos (como spam x n√£o spam).

üìå **Como funciona?**
- O **CountVectorizer** transforma o texto em uma matriz de contagem de palavras (Bag of Words).
- O **Naive Bayes Multinomial** calcula a probabilidade do e-mail ser spam ou n√£o, assumindo independ√™ncia entre as palavras (modelo "ing√™nuo").
- O modelo aprende com um conjunto de e-mails j√° classificados e usa esse aprendizado para prever novos casos.

üí° **Aplica√ß√£o no neg√≥cio:**  
Ajuda a automatizar o filtro de e-mails, reduzir fraudes, melhorar o atendimento ao cliente e proteger sistemas.
""")

# Dados mais ricos
emails = [
    # Spam
    "Oferta especial! Compre agora mesmo e ganhe b√¥nus",
    "Promo√ß√£o exclusiva: clique e aproveite",
    "√öltima chance para ganhar um pr√™mio incr√≠vel",
    "Grande oportunidade: cr√©dito aprovado sem consulta",
    "Oferta limitada: baixe gr√°tis",
    "Voc√™ foi sorteado! Seu pr√™mio est√° aqui",
    "Ganhe dinheiro r√°pido sem sair de casa",
    "Clique para desbloquear sua oferta secreta",
    "Ganhe viagens gr√°tis para o Caribe",
    "Seu cart√£o de cr√©dito foi pr√©-aprovado",
    # N√£o spam
    "Reuni√£o agendada para amanh√£ √†s 10h",
    "Relat√≥rio financeiro do trimestre dispon√≠vel",
    "Prezado colaborador, seguem as orienta√ß√µes",
    "Documentos anexos para sua revis√£o",
    "Atualiza√ß√£o do projeto enviada",
    "Confirma√ß√£o de inscri√ß√£o no evento",
    "Parab√©ns pelo desempenho no √∫ltimo m√™s",
    "Hor√°rio da entrevista confirmado",
    "Seu extrato banc√°rio est√° dispon√≠vel",
    "Pedido de or√ßamento recebido"
]
labels = [1]*10 + [0]*10

# Treinamento
modelo = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])
modelo.fit(emails, labels)

# Entrada do usu√°rio
st.write("Digite o conte√∫do de um e-mail abaixo para classificar:")
entrada = st.text_area("Texto do e-mail")

if st.button("Classificar"):
    if entrada.strip() == "":
        st.warning("Por favor, digite um e-mail para classificar.")
    else:
        resultado = modelo.predict([entrada])[0]
        prob = modelo.predict_proba([entrada])[0][1]

        if resultado == 1:
            st.error(f"üö® Este e-mail foi classificado como **SPAM** (confian√ßa: {prob:.2%})")
        else:
            st.success(f"‚úÖ Este e-mail **n√£o √© SPAM** (confian√ßa: {prob:.2%})")
