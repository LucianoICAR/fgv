import streamlit as st
import pandas as pd
import numpy as np
from io import StringIO
from mlxtend.frequent_patterns import apriori, association_rules
from sklearn.preprocessing import MultiLabelBinarizer
import re
from collections import Counter, defaultdict
import random

st.set_page_config(page_title="Apriori ‚Äì Treino & Predi√ß√£o", layout="wide")
st.title("üõí Apriori com Duas Bases: Treino/Teste e Predi√ß√£o")

st.markdown("""
Voc√™ √© um **consultor de IA** ajudando um **mercado de bairro** a entender padr√µes de compra para **ofertas**, **layout da loja** e **estoque**.

**Fluxo da atividade**  
1) Carregue **duas bases** (ou gere sint√©ticas):  
   - **Treino/Teste (1000 transa√ß√µes)** ‚Üí aprender padr√µes e **gerar regras**.  
   - **Predi√ß√£o (100 transa√ß√µes)** ‚Üí **aplicar as regras** para recomendar itens a cada carrinho.  
2) Ajuste os **par√¢metros** do Apriori e dos filtros de regras.  
3) Avalie **cobertura** e **qualidade** das recomenda√ß√µes.  
4) Escreva recomenda√ß√µes operacionais para o lojista.
""")

# --------------------------
# Sinthetic data generator
# --------------------------
def gerar_transacoes_sinteticas(n, seed=42):
    random.seed(seed)
    np.random.seed(seed)

    lacteos = ["leite", "queijo", "manteiga", "iogurte"]
    panificados = ["p√£o", "biscoito", "bolo"]
    cafe_e_afins = ["caf√©", "a√ß√∫car", "filtro de caf√©"]
    massas = ["macarr√£o", "molho de tomate", "queijo ralado"]
    basicos = ["arroz", "feij√£o", "√≥leo", "farinha", "sal"]
    frios = ["presunto", "mussarela"]
    limpeza = ["detergente", "esponja", "sab√£o em p√≥", "amaciante"]
    higiene = ["papel higi√™nico", "sabonete", "creme dental", "escova de dente"]
    bebidas = ["refrigerante", "suco", "√°gua mineral"]
    snacks = ["batata chips", "chocolate", "bala"]

    base_pop = lacteos + panificados + cafe_e_afins + massas + basicos + frios + limpeza + higiene + bebidas + snacks

    transacoes = []
    for _ in range(n):
        cesta = set()
        tam = np.random.choice([2,3,4,5,6], p=[0.15,0.30,0.30,0.18,0.07])

        if random.random() < 0.35:
            cesta.add("leite")
            if random.random() < 0.6: cesta.add("p√£o")
            if random.random() < 0.4: cesta.add("manteiga")
        if random.random() < 0.30:
            cesta.add("caf√©")
            if random.random() < 0.7: cesta.add("a√ß√∫car")
            if random.random() < 0.35: cesta.add("filtro de caf√©")
        if random.random() < 0.28:
            cesta.add("macarr√£o")
            if random.random() < 0.7: cesta.add("molho de tomate")
            if random.random() < 0.5: cesta.add("queijo ralado")
        if random.random() < 0.40:
            cesta.add("arroz")
            if random.random() < 0.75: cesta.add("feij√£o")
            if random.random() < 0.45: cesta.add("√≥leo")
        if random.random() < 0.25:
            cesta.add("detergente")
            if random.random() < 0.5: cesta.add("esponja")
        if random.random() < 0.25:
            cesta.add("papel higi√™nico")
            if random.random() < 0.4: cesta.add("sabonete")

        while len(cesta) < tam:
            cesta.add(random.choice(base_pop))

        transacoes.append(", ".join(sorted(cesta)))

    return pd.DataFrame({"Transacao": transacoes})

# --------------------------
# Helpers
# --------------------------
def split_itens(x: str):
    if pd.isna(x):
        return []
    partes = re.split(r"[;,]", str(x))
    return [p.strip().lower() for p in partes if p and p.strip()]

def listas_para_ohe(series_listas):
    mlb = MultiLabelBinarizer(sparse_output=False)
    ohe = mlb.fit_transform(series_listas)
    df_bin = pd.DataFrame(ohe, columns=mlb.classes_).astype(bool)
    return df_bin, mlb

def fs_to_text(fs):
    return ", ".join(sorted(list(fs)))

def aplicar_regras_em_cesta(itens_cesta_set, regras_df, top_k=None, evitar_existentes=True):
    recs = []
    for _, r in regras_df.iterrows():
        ante = r["antecedents"]
        cons = r["consequents"]
        if ante.issubset(itens_cesta_set):
            sug = [c for c in cons if (not evitar_existentes or c not in itens_cesta_set)]
            if sug:
                recs.append((tuple(sorted(sug)), r["lift"], r["confidence"], r["support"]))
    recs.sort(key=lambda x: (x[1], x[2], x[3]), reverse=True)
    if top_k:
        recs = recs[:top_k]
    return recs

# --------------------------
# Atividade (roteiro did√°tico)
# --------------------------
st.markdown("""
---
## üéØ Atividade proposta (vers√£o aprimorada)

1) **Prepare os dados**  
   - Use as bases sint√©ticas (1000 e 100) ou fa√ßa **upload** das suas.  
   - Garanta listas de itens na coluna de transa√ß√µes (ex.: `"leite, p√£o, manteiga"`).

2) **Aprenda as regras** na base **Treino/Teste**  
   - Varie **Suporte**, **Confian√ßa**, **Lift**, **Tamanho** de conjuntos.  
   - Registre **quantas regras** obteve e **quais s√£o as top 5 por *lift***.

3) **Aplique as regras** na base **Predi√ß√£o**  
   - Observe **Cobertura** (% de carrinhos com recomenda√ß√£o) e **M√©dia de recomenda√ß√µes por transa√ß√£o**.  
   - Liste os **Top 10 itens recomendados**.

4) **Recomenda√ß√µes ao neg√≥cio**  
   - Escolha **ao menos 2 regras** e explique como us√°-las (combos, cross-sell, layout de g√¥ndolas, precifica√ß√£o, *endcaps*).  
   - Proponha **um experimento A/B** simples para validar o impacto de uma recomenda√ß√£o no faturamento.

5) **Reflex√µes (responder no relat√≥rio)**  
   - Como **suporte** impacta a **escalabilidade operacional**?  
   - Como **confian√ßa** e **lift** impactam a **qualidade** das recomenda√ß√µes?  
   - Qual trade-off voc√™ encontrou entre **n√∫mero de regras** e **relev√¢ncia**?  
   - Se um item √© muito popular, como isso influencia o **lift**?

> **Dica**: Foque em regras com **lift > 1** e **confian√ßa** alta; por√©m, um **suporte** muito baixo pode dificultar a execu√ß√£o pr√°tica na loja.
""")
