# streamlit_app.py (tarefa1_supervisionado_v3)
# ------------------------------------------------------
# Exerc√≠cio: Avalia√ß√£o Executiva de um Sistema de IA (Supervisionado)
# Requisitos do professor:
# 1) Apresentar um problema de neg√≥cio.
# 2) Upload de base hist√≥rica e split 70/30 (treino/teste).
# 3) O sistema usa IA SUPERVISIONADA e resolve PARCIALMENTE o problema.
# 4) Exibir APENAS a ACUR√ÅCIA.
# 5) Exibir a base utilizada (mesmo com erros) e DESTACAR erros por cor.
# 6) Permitir inserir UMA NOVA BASE (sem alvo) para obter as PREDI√á√ïES do sistema.
# 7) Mostrar os pedidos com risco de atraso (predi√ß√£o = 1).
# 8) As equipes analisam e prop√µem a√ß√µes do EXECUTIVO com base nos 10 passos.
# ------------------------------------------------------

import numpy as np
import pandas as pd
import streamlit as st

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# ===============================
# 1) Introdu√ß√£o
# ===============================
st.title("üì¶ Avalia√ß√£o Executiva de um Sistema de IA Supervisionado")
st.markdown("""
Este exerc√≠cio simula o uso de **IA supervisionada** para prever **atrasos em entregas**.
O objetivo √© que o **Executivo** compreenda limita√ß√µes, riscos e decis√µes necess√°rias em todas as etapas.
""")

# ===============================
# 2) Upload da base hist√≥rica
# ===============================
st.header("1) Upload da Base Hist√≥rica")
file = st.file_uploader("üì• Envie a base hist√≥rica (CSV com coluna alvo `atraso`)", type=["csv"], key="hist")

if file is not None:
    df = pd.read_csv(file)

    st.write("Pr√©via da base hist√≥rica:")
    st.dataframe(df.head(), use_container_width=True)

    # Destacar erros (valores nulos ou inconsistentes)
    erros = df.isna() | df.applymap(lambda x: isinstance(x, str) and not x.isnumeric())
    st.write("Linhas destacadas em vermelho possuem potenciais erros:")
    st.dataframe(df.style.apply(lambda row: ['background-color: red' if e else '' for e in row], axis=1))

    # ===============================
    # 3) Treino/Teste e modelo
    # ===============================
    st.header("2) Treinamento e Avalia√ß√£o")

    if "atraso" in df.columns:
        X = df.drop(columns=["atraso"])
        y = df["atraso"]

        # Identificar colunas num√©ricas e categ√≥ricas
        num_cols = X.select_dtypes(include=["int64", "float64"]).columns
        cat_cols = X.select_dtypes(include=["object"]).columns

        # Pr√©-processamento
        preprocessor = ColumnTransformer(
            transformers=[
                ("num", Pipeline(steps=[
                    ("imputer", SimpleImputer(strategy="median")),
                    ("scaler", StandardScaler())
                ]), num_cols),
                ("cat", Pipeline(steps=[
                    ("imputer", SimpleImputer(strategy="most_frequent")),
                    ("onehot", OneHotEncoder(handle_unknown="ignore"))
                ]), cat_cols)
            ]
        )

        # Modelo
        pipe = Pipeline(steps=[("preprocessor", preprocessor),
                               ("classifier", LogisticRegression(max_iter=1000))])

        # Split 70/30
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
        pipe.fit(X_train, y_train)
        y_pred = pipe.predict(X_test)

        # Acur√°cia
        acc = accuracy_score(y_test, y_pred)
        st.metric("Acur√°cia do Modelo", f"{acc:.2%}")

        # ===============================
        # 4) Nova base para predi√ß√£o
        # ===============================
        st.header("3) Predi√ß√£o com Nova Base")
        st.caption("Envie um CSV **sem a coluna alvo** para obter as **predi√ß√µes** do modelo treinado acima.")
        new_file = st.file_uploader(
            "üì• Envie um CSV para predi√ß√£o (mesmas colunas de entrada, sem a classe)", 
            type=["csv"], key="novo"
        )

        if new_file is not None:
            try:
                df_new = pd.read_csv(new_file)
            except Exception:
                new_file.seek(0)
                df_new = pd.read_csv(new_file, sep=';')

            st.write("Pr√©via da nova base:")
            st.dataframe(df_new.head(), use_container_width=True)

            try:
                preds_new = pipe.predict(df_new)
                out = df_new.copy()
                out["predicao_atraso"] = preds_new

                # üîé Mostrar apenas pedidos com risco de atraso
                atrasos = out[out["predicao_atraso"] == 1]
                st.success(f"Foram identificados {len(atrasos)} pedidos com risco de atraso.")
                st.dataframe(atrasos, use_container_width=True)

                # Bot√£o para baixar todas as predi√ß√µes
                st.download_button(
                    "‚¨áÔ∏è Baixar todas as predi√ß√µes (CSV)",
                    data=out.to_csv(index=False).encode("utf-8"),
                    file_name="predicoes_nova_base.csv",
                    mime="text/csv"
                )

            except Exception as e:
                st.warning(f"N√£o foi poss√≠vel prever com a nova base: {e}")

# ===============================
# 5) Discuss√£o Executiva
# ===============================
st.markdown("---")
st.header("4) Discuss√£o em Equipe ‚Äî A√ß√µes do Executivo")
st.markdown(
    """
    1. **Objetivos** ‚Äî O sistema ajuda a atingir a meta de neg√≥cio?  
    2. **Fontes de dados** ‚Äî H√° fontes cr√≠ticas faltando?  
    3. **Refinamento** ‚Äî Os erros destacados (faltantes, duplicados, tipos) comprometem decis√µes?  
    4. **Vari√°veis** ‚Äî Quais atributos devem ser **exigidos** ou criados?  
    5. **Restri√ß√µes** ‚Äî H√° requisitos de explicabilidade, tempo de resposta ou custo a refor√ßar antes do pr√≥ximo ciclo?  
    6. **Aprendizado** ‚Äî O tipo (supervisionado) √© adequado? Precisamos rotular melhor os dados (defini√ß√µes claras de atraso)?  
    7. **Algoritmo** ‚Äî Mesmo exibindo s√≥ acur√°cia, precisamos autorizar testes com alternativas mais explic√°veis/robustas?  
    8. **Treinamento** ‚Äî O 70/30 est√° ok? Precisamos de pol√≠tica de vers√£o de modelos e dados?  
    9. **Avalia√ß√£o** ‚Äî S√≥ acur√°cia basta para o risco?  
    10. **Implanta√ß√£o/Monitoramento** ‚Äî Se fosse para produ√ß√£o, que SLAs e auditorias o executivo cobraria?  
    """
)
st.success("Objetivo pedag√≥gico: evidenciar que **o executivo decide rumos e pol√≠ticas em TODAS as etapas, n√£o apenas ao final.**")
