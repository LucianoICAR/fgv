# streamlit_app.py (tarefa1_supervisionado_v2)
# ------------------------------------------------------
# Exerc√≠cio: Avalia√ß√£o Executiva de um Sistema de IA (Supervisionado)
# Requisitos do professor:
# 1) Apresentar um problema de neg√≥cio.
# 2) Upload de base hist√≥rica e split 70/30 (treino/teste).
# 3) O sistema usa IA SUPERVISIONADA e resolve PARCIALMENTE o problema.
# 4) Exibir APENAS a ACUR√ÅCIA.
# 5) Exibir a base utilizada (mesmo com erros) e DESTACAR erros por cor.
# 6) Permitir inserir UMA NOVA BASE (sem alvo) para obter as PREDI√á√ïES do sistema.
# As equipes analisam e prop√µem a√ß√µes do EXECUTIVO com base nos 10 passos.
# ------------------------------------------------------

import numpy as np
import pandas as pd
import streamlit as st

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

st.set_page_config(page_title="Exerc√≠cio ‚Äî Avalia√ß√£o Executiva de IA (70/30)", layout="wide")
st.title("Exerc√≠cio ‚Äî Avalia√ß√£o Executiva de um Sistema de IA (70/30)")

# 1) Problema de neg√≥cio (exemplo claro para as equipes)
st.markdown(
    """
    ### üß© Problema de Neg√≥cio (Exemplo)
    A empresa **Entrega R√°pida** sofre com **atrasos nas entregas** e quer **priorizar pedidos** com maior risco de atraso.

    **Tipo de IA utilizado:** este sistema √© de **aprendizado supervisionado**.

    **Como o sistema pretende resolver o problema:**
    1. A equipe **faz upload** de uma base hist√≥rica com uma **coluna alvo** (ex.: `atraso`, `target`, `label`, `classe`) indicando se o pedido atrasou (1) ou n√£o (0).
    2. O sistema faz um **split 70%/30%** (treino/teste), treina um **modelo baseline (Regress√£o Log√≠stica)** e mede **apenas a acur√°cia** no conjunto de **teste**.
    3. A acur√°cia indica **o quanto o modelo acerta** ao classificar atrasos vs. n√£o atrasos. √â uma **solu√ß√£o parcial**: serve para discutir se **ajuda a priorizar** pedidos com risco, **quais dados faltam** e **quais pol√≠ticas** o executivo deve definir para o pr√≥ximo ciclo.

    **O que o sistema N√ÉO faz:**
    - N√£o apresenta outras m√©tricas.
    - N√£o corrige automaticamente os erros da base; apenas **destaca** onde est√£o, para apoiar **decis√µes executivas** sobre qualidade de dados.
    """
)

st.markdown("---")

# 2) Upload e sele√ß√£o de coluna alvo
st.header("1) Upload da Base e Sele√ß√£o da Classe")
file = st.file_uploader("üì• Envie um CSV (delimitador v√≠rgula)", type=["csv"]) 
random_state = st.sidebar.number_input("Semente (random_state)", min_value=0, value=42, step=1)

if file is None:
    st.info("Envie um arquivo .csv contendo a coluna alvo (ex.: target, label, classe). Mantenha os erros: o objetivo √© avali√°-los.")
    st.stop()

# Tenta ler separado por v√≠rgula; se falhar, tenta ponto e v√≠rgula
try:
    df_raw = pd.read_csv(file)
except Exception:
    file.seek(0)
    df_raw = pd.read_csv(file, sep=';')

# 5) Exibir a base (mesmo com erros) + Destacar erros por cor
st.header("2) Base Utilizada e Erros Destacados")

# Heur√≠sticas de problemas: faltantes, duplicados, tipagem inconsistente, outliers (z>4)
dup_mask = df_raw.duplicated(keep=False)
convertible_numeric = []
non_numeric_cells = pd.DataFrame(False, index=df_raw.index, columns=df_raw.columns)
for c in df_raw.columns:
    try:
        coerced = pd.to_numeric(df_raw[c], errors='coerce')
        if coerced.notna().mean() >= 0.5:
            convertible_numeric.append(c)
            non_numeric_cells[c] = coerced.isna() & (~df_raw[c].isna())
    except Exception:
        pass

outlier_cells = pd.DataFrame(False, index=df_raw.index, columns=df_raw.columns)
for c in convertible_numeric:
    coerced = pd.to_numeric(df_raw[c], errors='coerce')
    m = coerced.mean()
    s = coerced.std(ddof=0)
    if s and s > 0:
        z = (coerced - m).abs() / s
        outlier_cells[c] = z > 4

na_cells = df_raw.isna()

def style_errors(val, row_idx, col_name):
    styles = []
    if dup_mask.iloc[row_idx]:
        styles.append("background-color: #ffe0e0")  # duplicados
    if pd.isna(val):
        styles.append("background-color: #fff3cd")  # faltante
    if non_numeric_cells.loc[row_idx, col_name]:
        styles.append("background-color: #e0f7ff")  # tipagem inconsistente
    if outlier_cells.loc[row_idx, col_name]:
        styles.append("background-color: #e6ffe6")  # outlier
    return ";".join(styles) if styles else ""

styled = df_raw.style.format(precision=3)
styled = styled.apply(lambda s: [style_errors(v, s.index[i], s.name) for i, v in enumerate(s)], axis=0)

st.caption("Cores: vermelho=duplicado, amarelo=faltante, azul=tipagem inconsistente, verde=poss√≠vel outlier.")
st.dataframe(styled, use_container_width=True)

# 3) IA supervisionada simples
st.header("3) Treino 70% / Teste 30% ‚Äî IA Supervisionada (Prot√≥tipo Parcial)")

def infer_target(df: pd.DataFrame):
    for cand in ["target", "label", "classe", "y", "atraso"]:
        if cand in df.columns:
            return cand
    return None

target_guess = infer_target(df_raw)
cols = ["‚Äî selecione ‚Äî"] + df_raw.columns.tolist()
sel_index = cols.index(target_guess) if target_guess in df_raw.columns else 0

label_col = st.selectbox("Coluna alvo (classe)", options=cols, index=sel_index)
if label_col == "‚Äî selecione ‚Äî":
    st.warning("Selecione a coluna alvo para continuar.")
    st.stop()

X = df_raw.drop(columns=[label_col])
y = df_raw[label_col]

# Remover linhas com alvo ausente
st.warning("Linhas sem alvo (classe NaN) n√£o podem treinar/testar. Ser√£o removidas apenas para o modelo.")
missing_target_idx = y[y.isna()].index.tolist()
if missing_target_idx:
    st.write("Linhas removidas por alvo ausente:", missing_target_idx)
    X = X.drop(index=missing_target_idx)
    y = y.drop(index=missing_target_idx)

# Pr√©-processamento
num_cols = X.select_dtypes(include=[np.number]).columns.tolist()
cat_cols = X.columns.difference(num_cols).tolist()

pre = ColumnTransformer(
    transformers=[
        ("num", Pipeline(steps=[("imp", SimpleImputer(strategy="median")), ("scaler", StandardScaler())]), num_cols),
        ("cat", Pipeline(steps=[("imp", SimpleImputer(strategy="most_frequent")), ("oh", OneHotEncoder(handle_unknown="ignore"))]), cat_cols),
    ]
)

model = LogisticRegression(max_iter=300)
pipe = Pipeline(steps=[("pre", pre), ("clf", model)])

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=random_state)
pipe.fit(X_train, y_train)
preds = pipe.predict(X_test)
acc = accuracy_score(y_test, preds)

st.metric("Acur√°cia (30% teste)", f"{acc:.3f}")

# 5) Testar com nova base
st.header("5) Testar com uma **nova base**")
new_file = st.file_uploader("üì• Envie um CSV para predi√ß√£o (sem coluna alvo)", type=["csv"], key="novo")
if new_file is not None:
    try:
        df_new = pd.read_csv(new_file)
    except Exception:
        new_file.seek(0)
        df_new = pd.read_csv(new_file, sep=';')
    st.write("Pr√©via da nova base:")
    st.dataframe(df_new.head(), use_container_width=True)
    try:
        preds_new = pipe.predict(df_new)
        out = df_new.copy()
        out["predicao_atraso"] = preds_new

        # üîé Mostrar apenas entregas com previs√£o de atraso
        atrasos = out[out["predicao_atraso"] == 1]
        st.success(f"Foram identificados {len(atrasos)} pedidos com risco de atraso.")
        st.dataframe(atrasos, use_container_width=True)

        # Bot√£o para baixar todas as predi√ß√µes
        st.download_button(
        "‚¨áÔ∏è Baixar todas as predi√ß√µes (CSV)",
        data=out.to_csv(index=False).encode("utf-8"),
        file_name="predicoes_nova_base.csv",
        mime="text/csv")

        except Exception as e: st.warning(f"N√£o foi poss√≠vel prever com a nova base: {e}")

# 6) Discuss√£o em Equipe
st.header("6) Discuss√£o em Equipe ‚Äî A√ß√µes do Executivo")
st.markdown(
    """
    1. **Objetivos** ‚Äî O sistema ajuda a atingir a meta de neg√≥cio? 
    2. **Fontes de dados** ‚Äî H√° fontes cr√≠ticas faltando? 
    3. **Refinamento** ‚Äî Os erros destacados comprometem decis√µes? 
    4. **Vari√°veis** ‚Äî Quais atributos devem ser exigidos ou criados?
    5. **Restri√ß√µes** ‚Äî H√° requisitos de explicabilidade, tempo de resposta ou custo?
    6. **Aprendizado** ‚Äî O tipo (supervisionado) √© adequado?
    7. **Algoritmo** ‚Äî Precisamos de alternativas mais explic√°veis/robustas?
    8. **Treinamento** ‚Äî O 70/30 est√° ok? Pol√≠tica de vers√£o de modelos/dados?
    9. **Avalia√ß√£o** ‚Äî S√≥ acur√°cia basta? 
    10. **Implanta√ß√£o/Monitoramento** ‚Äî Que SLAs e auditorias seriam cobrados?
    """
)
st.success("Objetivo pedag√≥gico: evidenciar que **o executivo decide rumos e pol√≠ticas** em TODAS as etapas, n√£o apenas ao final.")
