# streamlit_app.py
# ------------------------------------------------------
# Exerc√≠cio: Avalia√ß√£o Executiva de um Sistema de IA (Supervisionado)
# Requisitos do professor:
# 1) Apresentar um problema de neg√≥cio.
# 2) Upload de base hist√≥rica e split 70/30 (treino/teste).
# 3) O sistema usa IA supervisionada e resolve PARCIALMENTE o problema.
# 4) Exibir APENAS a ACUR√ÅCIA.
# 5) Exibir a base utilizada (mesmo com erros).
# 6) Apontar ONDE h√° erros na base, colorindo as c√©lulas problem√°ticas.
# As equipes analisam e prop√µem a√ß√µes do EXECUTIVO com base nos 10 passos.
# ------------------------------------------------------

import numpy as np
import pandas as pd
import streamlit as st

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

st.set_page_config(page_title="Exerc√≠cio ‚Äî Avalia√ß√£o Executiva de IA (70/30)", layout="wide")
st.title("Exerc√≠cio ‚Äî Avalia√ß√£o Executiva de um Sistema de IA (70/30)")

# 1) Problema de neg√≥cio (exemplo claro para as equipes)
st.markdown(
    """
    ### üß© Problema de Neg√≥cio (Exemplo)
    A empresa **Entrega R√°pida** sofre com **atrasos nas entregas** e quer **priorizar pedidos** com maior risco de atraso.
    Seu papel √© **avaliar um sistema de IA supervisionado** (prototipado) que **resolve parcialmente** o problema e decidir **a√ß√µes executivas**.

    **O que o sistema faz:** treina um modelo simples em 70% dos dados e mede **apenas a acur√°cia** em 30% dos dados.
    **O que cabe √† equipe:** interpretar o resultado, analisar a qualidade da base (com erros) e propor decis√µes executivas.
    """
)

st.markdown("---")

# 2) Upload e sele√ß√£o de coluna alvo
st.header("1) Upload da Base e Sele√ß√£o da Classe")
file = st.file_uploader("üì• Envie um CSV (delimitador v√≠rgula)", type=["csv"]) 
random_state = st.sidebar.number_input("Semente (random_state)", min_value=0, value=42, step=1)

if file is None:
    st.info("Envie um arquivo .csv contendo a coluna alvo (ex.: target, label, classe). Mantenha os erros: o objetivo √© avali√°-los.")
    st.stop()

# Tenta ler separado por v√≠rgula; se falhar, tenta ponto e v√≠rgula
try:
    df_raw = pd.read_csv(file)
except Exception:
    file.seek(0)
    df_raw = pd.read_csv(file, sep=';')

# 5) Exibir a base (mesmo com erros) + 6) Destacar erros por cor
st.header("2) Base Utilizada e Erros Destacados")

# Heur√≠sticas simples de detec√ß√£o de problemas (c√©lulas):
# - Valores faltantes (NaN)
# - Linhas duplicadas (marca a linha toda)
# - Tipagem inconsistente em colunas potencialmente num√©ricas (n√£o-convers√≠veis)
# - Valores fora de faixa num√©rica opcional (z-score > 4) como poss√≠vel outlier (fraco indicativo de erro)

# Duplicados (boolean mask por linha)
dup_mask = df_raw.duplicated(keep=False)

# Tentar identificar colunas "numeric√°veis"
convertible_numeric = []
non_numeric_cells = pd.DataFrame(False, index=df_raw.index, columns=df_raw.columns)
for c in df_raw.columns:
    # Tenta converter e v√™ quantos viram NaN a mais do que j√° eram NaN
    try:
        coerced = pd.to_numeric(df_raw[c], errors='coerce')
        # Marca como potencialmente num√©rica se pelo menos metade converteu
        if coerced.notna().mean() >= 0.5:
            convertible_numeric.append(c)
            # C√©lulas originalmente n√£o num√©ricas que viraram NaN diferem de NaN original
            non_numeric_cells[c] = coerced.isna() & (~df_raw[c].isna())
    except Exception:
        pass

# Poss√≠veis outliers por z-score > 4 apenas nas colunas convertible_numeric
outlier_cells = pd.DataFrame(False, index=df_raw.index, columns=df_raw.columns)
for c in convertible_numeric:
    coerced = pd.to_numeric(df_raw[c], errors='coerce')
    m = coerced.mean()
    s = coerced.std(ddof=0)
    if s and s > 0:
        z = (coerced - m).abs() / s
        outlier_cells[c] = z > 4

# M√°scara de faltantes
na_cells = df_raw.isna()

# Fun√ß√£o de estilo por c√©lula
def style_errors(val, row_idx, col_name):
    styles = []
    # Ordem de prioridade: duplicado (linha), faltante, n√£o-num√©rico indevido, outlier
    if dup_mask.iloc[row_idx]:
        styles.append("background-color: #ffe0e0")  # vermelho claro para duplicados (linha inteira)
    if pd.isna(val):
        styles.append("background-color: #fff3cd")  # amarelo claro para NaN
    if non_numeric_cells.loc[row_idx, col_name]:
        styles.append("background-color: #e0f7ff")  # azul claro para tipagem inconsistente
    if outlier_cells.loc[row_idx, col_name]:
        styles.append("background-color: #e6ffe6")  # verde claro para outlier
    return ";".join(styles) if styles else ""

# Aplica Styler c√©lula a c√©lula
styled = df_raw.style.format(precision=3)
for r in range(len(df_raw)):
    for c in df_raw.columns:
        styled = styled.set_properties(subset=pd.IndexSlice[r, c], **{"background-color": None})

styled = styled.apply(lambda s: [style_errors(v, s.index[i], s.name) for i, v in enumerate(s)], axis=0)

st.caption("Cores: vermelho=duplicado (linha), amarelo=faltante, azul=tipagem inconsistente, verde=poss√≠vel outlier.")
st.dataframe(styled, use_container_width=True)

# 3) IA supervisionada simples (parcial): Logistic Regression
st.header("3) Treino 70% / Teste 30% ‚Äî IA Supervisionada (Prot√≥tipo Parcial)")

# Sele√ß√£o da coluna alvo (tentativa autom√°tica)
def infer_target(df: pd.DataFrame):
    for cand in ["target", "label", "classe", "y"]:
        if cand in df.columns:
            return cand
    return None

target_guess = infer_target(df_raw)
cols = ["‚Äî selecione ‚Äî"] + df_raw.columns.tolist()
sel_index = cols.index(target_guess) if target_guess in df_raw.columns else 0

label_col = st.selectbox("Coluna alvo (classe)", options=cols, index=sel_index)
if label_col == "‚Äî selecione ‚Äî":
    st.warning("Selecione a coluna alvo para continuar.")
    st.stop()

# Define X, y e split 70/30
X = df_raw.drop(columns=[label_col])
y = df_raw[label_col]

# Identifica√ß√£o de tipos
num_cols = X.select_dtypes(include=[np.number]).columns.tolist()
cat_cols = X.columns.difference(num_cols).tolist()

pre = ColumnTransformer(
    transformers=[
        ("num", Pipeline(steps=[("imp", SimpleImputer(strategy="median")), ("scaler", StandardScaler())]), num_cols),
        ("cat", Pipeline(steps=[("imp", SimpleImputer(strategy="most_frequent")), ("oh", OneHotEncoder(handle_unknown="ignore"))]), cat_cols),
    ]
)

model = LogisticRegression(max_iter=300)
pipe = Pipeline(steps=[("pre", pre), ("clf", model)])

# Estratifica se for classifica√ß√£o com poucas classes
strat = y if y.nunique() <= 20 else None
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=random_state, stratify=strat)

# Treina e mede APENAS acur√°cia
pipe.fit(X_train, y_train)
preds = pipe.predict(X_test)
acc = accuracy_score(y_test, preds)

col1, col2 = st.columns([1,2])
with col1:
    st.metric("Acur√°cia (30% teste)", f"{acc:.3f}")
with col2:
    st.info("Conforme o enunciado do exerc√≠cio, **somente a acur√°cia** √© exibida. As equipes devem discutir se esse n√∫mero, sozinho, √© suficiente para a decis√£o.")

st.markdown("---")

# 6) Guia de discuss√£o focado no papel do EXECUTIVO pelos 10 passos
st.header("4) Discuss√£o em Equipe ‚Äî A√ß√µes do Executivo (10 Passos)")
st.markdown(
    """
    1. **Objetivos** ‚Äî A acur√°cia apresentada ajuda a atingir a meta de neg√≥cio? O que falta medir (ex.: recall de atrasos)?
    2. **Fontes de dados** ‚Äî H√° fontes cr√≠ticas faltando (ex.: clima em tempo real)? O executivo pode habilitar acesso?
    3. **Refinamento** ‚Äî Os erros destacados (faltantes, duplicados, tipos) comprometem decis√µes? Quais pol√≠ticas de qualidade aprovar?
    4. **Vari√°veis** ‚Äî Quais atributos devem ser **exigidos** ou criados (ex.: densidade de paradas, janela de despacho)?
    5. **Restri√ß√µes** ‚Äî H√° requisitos de explicabilidade, tempo de resposta ou custo a refor√ßar antes do pr√≥ximo ciclo?
    6. **Aprendizado** ‚Äî O tipo (supervisionado) √© adequado? Precisamos rotular melhor os dados (defini√ß√µes claras de atraso)?
    7. **Algoritmo** ‚Äî Mesmo exibindo s√≥ acur√°cia, precisamos autorizar testes com alternativas mais explic√°veis/robustas?
    8. **Treinamento** ‚Äî O 70/30 est√° ok? Precisamos de pol√≠tica de vers√£o de modelos e dados?
    9. **Avalia√ß√£o** ‚Äî S√≥ acur√°cia basta para o risco? Que **m√©trica mandat√≥ria** o executivo exige no pr√≥ximo ciclo?
    10. **Implanta√ß√£o/Monitoramento** ‚Äî Se fosse para produ√ß√£o, que SLAs e auditorias o executivo cobraria?
    """
)

st.success("Objetivo pedag√≥gico: evidenciar que **o executivo decide rumos e pol√≠ticas** em TODAS as etapas, n√£o apenas ao final.")
